import directree.DirTree

buildscript {
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
    }
    dependencies {
        classpath "io.github.kdabir.directree:directree:+"
        classpath "gradle.plugin.io.github.kdabir.gradlehelpers:gradle-helpers:0.0.3"
    }
}

ext.groovyVersion =  "2.5.3"

apply plugin: 'idea'

idea {
    module {
        excludeDirs += [file(".gradle"), file('gradle'), file(".idea")]
    }
}


subprojects {
    apply plugin: 'maven'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: "io.github.kdabir.gradle-helpers"

    sourceCompatibility = 1.8 // java 8
    targetCompatibility = 1.8

    repositories {
        jcenter()
    }

    plugins.withType(GroovyPlugin) {

        dependencies {
            compile "org.codehaus.groovy:groovy-all:${groovyVersion}"

            testCompile 'org.spockframework:spock-core:1.0-groovy-2.4', { exclude module: 'groovy-all' }
        }

    }

    idea {
    module {
        excludeDirs += [file("out"), file('build')]
    }
}

    test {
        testLogging {
            events 'failed'
            exceptionFormat 'short'
        }
    }

    task setupDirs {
        doLast {
            helpers.createSourceDirs()
        }
    }
}


class CreateModule extends DefaultTask {
    // Use --name filename.
    @org.gradle.api.tasks.options.Option(
        option = "name",
        description = "module name"
    )
    String moduleName

    CreateModule() {
        moduleName = 'newmodule' // default name
        description = 'generates a new module, overwrites if already exists'
    }

    @OutputDirectory
    File getOutputFile() {
        return new File(project.rootDir, moduleName)
    }

    @TaskAction
    void create() {
        def name = moduleName // so that its available inside following closure
        DirTree.create(outputFile.absolutePath) {
            file("${name}.gradle", "//.keep")
            file("README.md", "# ${name}")
        }
        this.project.file("settings.gradle").append("\ninclude ':${name}'")
    }
}

task createModule(type: CreateModule)

task build

// gradle createModule --name epoch
// gradle epoch:setupDirs
// find . -type d -empty -delete



